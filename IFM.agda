{-# OPTIONS --rewriting #-}
module IFM where

open import Lib hiding (id; _∘_)
open import IF
open import IFA

ᵐc : ∀{ℓ ℓ'}(Γ : SCon) → _ᵃc {ℓ} Γ → _ᵃc {ℓ'} Γ → Set (ℓ ⊔ ℓ')
ᵐS : ∀{ℓ ℓ'}(B : TyS) → _ᵃS {ℓ} B → _ᵃS {ℓ'} B → Set (ℓ ⊔ ℓ')
ᵐP : ∀{ℓ ℓ' Γ}(A : TyP Γ){γ₀ γ₁} → ᵐc {ℓ}{ℓ'} Γ γ₀ γ₁ → (A ᵃP) γ₀ → (A ᵃP) γ₁ → Set (ℓ ⊔ ℓ')
ᵐt : ∀{ℓ ℓ' Γ}{B}(t : Tm Γ B){γ₀ γ₁} → ᵐc {ℓ}{ℓ'} Γ γ₀ γ₁ → ᵐS B ((t ᵃt) γ₀) ((t ᵃt) γ₁)

ᵐc ∙c       γ₀        γ₁        = Lift ⊤
ᵐc (Γ ▶c B) (γ₀ , α₀) (γ₁ , α₁) = (ᵐc Γ γ₀ γ₁) × (ᵐS B α₀ α₁)

ᵐS U        β₀ β₁ = β₀ → β₁
ᵐS (Π̂S T B) β₀ β₁ = (α : T) → ᵐS (B α) (β₀ α) (β₁ α)

ᵐP (Π̂P T B) {γ₀}{γ₁} γᵐ f₀ f₁  = (α : T) → ᵐP (B α) γᵐ (f₀ α) (f₁ α)
ᵐP {ℓ}{ℓ'} (El a)   γᵐ α₀ α₁   = Lift {ℓ'}{ℓ ⊔ ℓ'} (ᵐt a γᵐ α₀ ≡ α₁)
ᵐP (t ⇒P A) γᵐ f₀ f₁           = (x : (t ᵃt) _) → ᵐP A γᵐ (f₀ x) (f₁ (ᵐt t γᵐ x))

ᵐt vz       (γᵐ , αᵐ) = αᵐ
ᵐt (vs t)   (γᵐ , αᵐ) = ᵐt t γᵐ
ᵐt (t $S α) γᵐ        = ᵐt t γᵐ α

ᵐC : ∀{ℓ ℓ' Γc}(Γ : Con Γc){γc₀ γc₁}(γᵐ : ᵐc {ℓ}{ℓ'} Γc γc₀ γc₁)(γ₀ : (Γ ᵃC) γc₀)(γ₁ : (Γ ᵃC) γc₁) → Set (ℓ ⊔ ℓ')
ᵐC ∙ γᵐ γ₀ γ₁                      = Lift ⊤
ᵐC {Γc} (Γ ▶S B) (γᵐ , αᵐ) γ₀ γ₁   = ᵐC Γ γᵐ γ₀ γ₁
ᵐC (Γ ▶P A) γᵐ (γ₀ , α₀) (γ₁ , α₁) = (ᵐC Γ γᵐ γ₀ γ₁) × (ᵐP A γᵐ α₀ α₁)

ᵐs : ∀{ℓ ℓ' Γc Δc}(σ : Sub Γc Δc){γ₀ γ₁}(γᵐ : ᵐc {ℓ}{ℓ'} Γc γ₀ γ₁) → ᵐc Δc ((σ ᵃs) γ₀) ((σ ᵃs) γ₁)
ᵐs ε       γᵐ = lift tt
ᵐs (σ , t) γᵐ = ᵐs σ γᵐ , ᵐt t γᵐ
